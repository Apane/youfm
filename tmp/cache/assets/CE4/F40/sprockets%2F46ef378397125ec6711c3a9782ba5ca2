o: ActiveSupport::Cache::Entry	:@compressedF:@value"™?{"_version"%6776f581a4329e299531e1d52aa59832"
class"BundledAsset"logical_path"home.js"content_type"application/javascript"pathname"0$root/app/assets/javascripts/home.js.coffee"required_assets_digest"%5bdbc0dd3bc621f962aeadc08ac66013"lengthiB>"
mtime"2013-03-08T19:12:48+06:00"digest"%221d83d8781e7c7a681d8a030ff24dc2"source"B>(function() {

  this.playlistcall = function(playlistid, songid, songname, artistid, artistname, albumid, albumname, popularity, userid) {
    return $.ajax({
      type: "post",
      url: "/home/addtoplaylist",
      data: {
        userid: userid,
        playlistid: playlistid,
        songid: songid,
        songname: songname,
        artistid: artistid,
        artistname: artistname,
        albumid: albumid,
        albumname: albumname,
        popularity: popularity
      },
      success: function(response) {
        return true;
      }
    });
  };

  this.historycall = function(songid, songname, artistid, artistname, albumid, albumname, popularity, userid) {
    return $.ajax({
      type: "post",
      url: "/home/addtohistory",
      data: {
        userid: userid,
        songid: songid,
        songname: songname,
        artistid: artistid,
        artistname: artistname,
        albumid: albumid,
        albumname: albumname,
        popularity: popularity
      },
      success: function(response) {
        return true;
      }
    });
  };

  this.interactive = function() {
    var playvideo;
    $(".resultbar, .playlistbar, .historybar, .nowplayingbar").draggable({
      helper: function(event) {
        var container, selected;
        selected = $(".selectTrack");
        if (selected.length <= 1) {
          return $("<div id=\"draggingContainer\"><table></table></div>").find("table").append($(event.target).closest("tr").clone()).end().appendTo("body");
        } else {
          container = $("<div id=\"draggingContainer\"><table></table></div>");
          container.append(selected.clone());
          return container.appendTo("body");
        }
      },
      cursorAt: {
        left: -5,
        bottom: 5
      },
      cursor: "move",
      distance: 10,
      delay: 100,
      revert: true
    });
    $(".droppable").droppable({
      tolerance: "pointer",
      drop: function(event, ui) {
        var dropbox, id;
        dropbox = $(this);
        id = $(this).attr("id");
        if ($("#draggingContainer>tr").length >= 1) {
          return $("#draggingContainer>tr").each(function() {
            playlistcall(id, $(this).attr("songid"), $(this).attr("songname"), $(this).attr("artistid"), $(this).attr("artistname"), $(this).attr("albumid"), $(this).attr("albumname"), $(this).attr("popularity"), userid);
            return dropbox.css("background-color", "#FFFF9C").animate({
              backgroundColor: "#ED8835"
            }, 1500, function() {
              return dropbox.removeAttr("style");
            });
          });
        } else {
          playlistcall($(this).attr("id"), ui.draggable.attr("songid"), ui.draggable.attr("songname"), ui.draggable.attr("artistid"), ui.draggable.attr("artistname"), ui.draggable.attr("albumid"), ui.draggable.attr("albumname"), ui.draggable.attr("popularity"), userid);
          return $(this).css("background-color", "#FFFF9C").animate({
            backgroundColor: "#ED8835"
          }, 1500, function() {
            return $(this).removeAttr("style");
          });
        }
      }
    });
    $(".resultbar, .playlistbar, .nowplayingbar, .historybar").click(function(e) {
      if (!e.metaKey) {
        $('*').removeClass("selectTrack");
      }
      return $(this).addClass("selectTrack");
    });
    $(".resultbar, .playlistbar, .historybar").dblclick(function() {
      var alltracks, songid, string;
      $("#nowplayingtablebody").empty();
      $('*').removeClass("selectTrack");
      $('*').removeClass("currentTrack");
      $('tr[songid="' + songid + '"]').addClass("currentTrack");
      alltracks = $(this).parent().children().clone();
      $("#nowplayingtablebody").append(alltracks);
      $('#nowplayingtable *').removeClass("resultbar");
      $('#nowplayingtable *').removeClass("playlistbar");
      $('#nowplayingtablebody tr').addClass("nowplayingbar");
      songid = $(this).attr("songid");
      interactive();
      string = $(this).attr("string");
      return $.ajax({
        type: "POST",
        url: "/home/youtube",
        data: {
          ysearch: string
        },
        success: function(data) {
          var videoid;
          videoid = data.data.items[0].id;
          return playvideo(songid, videoid);
        }
      });
    });
    $(".nowplayingbar").dblclick(function() {
      var songid, string;
      songid = $(this).attr("songid");
      string = $(this).attr("string");
      $('*').removeClass("currentTrack");
      $('tr[songid="' + songid + '"]').addClass("currentTrack");
      return $.ajax({
        type: "POST",
        url: "/home/youtube",
        data: {
          ysearch: string
        },
        success: function(data) {
          var videoid;
          videoid = data.data.items[0].id;
          return playvideo(songid, videoid);
        }
      });
    });
    return playvideo = function(songid, videoid) {
      historycall($('tr[songid="' + songid + '"]').attr("songid"), $('tr[songid="' + songid + '"]').attr("songname"), $('tr[songid="' + songid + '"]').attr("artistid"), $('tr[songid="' + songid + '"]').attr("artistname"), $('tr[songid="' + songid + '"]').attr("albumid"), $('tr[songid="' + songid + '"]').attr("albumname"), $('tr[songid="' + songid + '"]').attr("popularity"), userid);
      return player.loadVideoById(videoid);
    };
  };

  $(function() {
    var percent, playlistmod, showplaylistfield, volpercent;
    $("#table").on("contextmenu", ".resultbar", function(event) {
      $(".customrightmenu").css({
        top: event.pageY + "px",
        left: event.pageX + "px"
      }).show();
      return false;
    });
    $("#table").on("contextmenu", ".playlistbar", function(event) {
      $(".playlistrightmenu").css({
        top: event.pageY + "px",
        left: event.pageX + "px"
      }).show();
      return false;
    });
    playlistmod = new Youfm.Collections.Playlists();
    playlistmod.fetch();
    $("#playlistlist").on("click", ".playlistDelete", function(event) {
      var curmod, currentid, x;
      currentid = $(this).parent().attr("id");
      x = parseInt(currentid, 10);
      curmod = playlistmod.get(x);
      if (confirm("Are you sure you want to delete this playlist?")) {
        curmod.destroy();
        $(this).parent().hide();
      }
      return false;
    });
    $("#createplaylist").hide();
    $("#createlink").show();
    $("#createlink").click(function() {
      return showplaylistfield();
    });
    $("#createplaylist").submit(function() {
      createplaylist();
      return false;
    });
    showplaylistfield = function() {
      $("#createplaylist").show();
      return $("#createlink").hide();
    };
    window.seek = false;
    percent = 0;
    $("#trackBar").mousedown(function(e) {
      var curr_width, x;
      window.seek = true;
      x = e.pageX - trackBar.offsetLeft;
      curr_width = $("#trackBar").width();
      return percent = x / curr_width;
    });
    $("#trackDot").mousedown(function() {
      return window.seek = true;
    });
    $("*").mouseup(function() {
      if (window.seek === true) {
        if (window.seek === true) {
          player.seekTo(percent * player.getDuration());
        }
        return window.seek = false;
      }
    });
    $(document).mousemove(function(e) {
      var curr_width, x;
      if (window.seek === true) {
        x = e.pageX - trackBar.offsetLeft;
        curr_width = $("#trackBar").width();
        percent = x / curr_width;
        if (percent > 1) {
          percent = 1;
        }
        if (percent < 0) {
          percent = 0;
        }
        $("#progressBarMid").css({
          width: percent * 100 + "%"
        });
        return false;
      }
    });
    window.volseek = false;
    volpercent = 0;
    $("#volumeBar").mousedown(function(e) {
      var curr_width, x;
      window.volseek = true;
      x = e.pageX - volumeBar.offsetLeft;
      curr_width = $("#volumeBar").width();
      return volpercent = x / curr_width;
    });
    $("#volDot").mousedown(function() {
      return window.volseek = true;
    });
    $("*").mouseup(function() {
      if (window.volseek === true) {
        return window.volseek = false;
      }
    });
    $(document).mousemove(function(e) {
      var curr_width, x;
      if (window.volseek === true) {
        x = e.pageX - volumeBar.offsetLeft;
        curr_width = $("#volumeBar").width();
        volpercent = x / curr_width;
        if (volpercent > 1) {
          volpercent = 1;
        }
        if (volpercent < 0) {
          volpercent = 0;
        }
        $("#volumeBarMid").css({
          width: volpercent * 100 + "%"
        });
        if (window.volseek === true) {
          return player.setVolume(volpercent * 100);
        }
      }
    });
    window.repeat = 0;
    $("#ordercontrols").on("click", "#repeatButton", function(event) {
      window.repeat = 1;
      $(this).addClass("repeated");
      return $("#repeatButton").css("backgroundPosition", "-48px -35px");
    });
    $("#ordercontrols").on("click", ".repeated", function(event) {
      window.repeat = 0;
      $(this).removeClass("repeated");
      return $("#repeatButton").css("backgroundPosition", "-44px 0px");
    });
    $("#playbackControls").on("click", ".playButton", function(event) {
      return player.playVideo();
    });
    $("#playbackControls").on("click", ".pauseButton", function(event) {
      return player.pauseVideo();
    });
    $("#playlistlist").on("click", ".droppable", function(event) {
      var id;
      id = $(this).attr("id");
      window.location.hash = "/playlist/" + id;
      return false;
    });
    $(".welcomeIcon").parent().click(function() {
      window.location.hash = "/";
      return false;
    });
    $(".topIcon").parent().click(function() {
      window.location.hash = "/top100";
      return false;
    });
    $(".newIcon").parent().click(function() {
      window.location.hash = "/newreleases";
      return false;
    });
    $(".pickIcon").parent().click(function() {
      window.location.hash = "/staffpicks";
      return false;
    });
    $(".nowIcon").parent().click(function() {
      window.location.hash = "/nowplaying";
      return false;
    });
    $(".historyIcon").parent().click(function() {
      window.location.hash = "/history";
      return false;
    });
    jQuery.fn.prevOrLast = function(selector) {
      var prev;
      prev = this.prev(selector);
      if (prev.length) {
        return prev;
      } else {
        return this.nextAll(selector).last();
      }
    };
    jQuery.fn.nextOrFirst = function(selector) {
      var next;
      next = this.next(selector);
      if (next.length) {
        return next;
      } else {
        return this.prevAll(selector).last();
      }
    };
    $("#playbackControls").on("click", ".prevButton", function(event) {
      return $("#nowplayingtablebody .currentTrack").prevOrLast().dblclick();
    });
    $("#playbackControls").on("click", ".nextButton", function(event) {
      return $("#nowplayingtablebody .currentTrack").nextOrFirst().dblclick();
    });
    window.videotime = function(x) {
      var minutes, seconds;
      minutes = Math.floor(x / 60);
      seconds = Math.ceil(x % 60);
      if (seconds < 10) {
        seconds = "0" + seconds;
      } else {
        seconds;

      }
      return minutes + ":" + seconds;
    };
    return window.reversetime = function(x, y) {
      var minutes, seconds, z;
      z = Math.floor(y) - Math.floor(x);
      minutes = Math.floor(z / 60);
      seconds = Math.ceil(z % 60);
      if (seconds < 10) {
        seconds = "0" + seconds;
      } else {
        seconds;

      }
      return "- " + minutes + ":" + seconds;
    };
  });

  this.submit = function() {
    window.location.hash = "/search/" + $("#searchbox").val();
    return false;
  };

  this.submitbig = function() {
    window.location.hash = "/search/" + $("#searchboxBig").val();
    return false;
  };

  this.submitbig2 = function() {
    window.location.hash = "/search/" + $("#searchboxBig2").val();
    return false;
  };

  this.submitbig3 = function() {
    window.location.hash = "/search/" + $("#searchboxBig3").val();
    return false;
  };

  $(function() {
    $("#table").hide();
    $("#loading").hide();
    $("#drops").hide();
    $("#userMenu").click(function() {
      return $("#drops").toggle();
    });
    $("section, footer, #sideBar, input, li").bind("click", function(event) {
      $("#drops").hide();
      $('.customrightmenu').hide();
      $('.playlistrightmenu').hide();
      return $('.historyrightmenu').hide();
    });
    $(".modal").hide();
    $("#loginButton").click(function() {
      $('#pageWrap').blurjs();
      return $("#loginModal").fadeIn("1000");
    });
    $("#registerButton").click(function() {
      $('#pageWrap').blurjs();
      return $("#registerModal").fadeIn("1000");
    });
    return $(".closeButton").click(function() {
      $.blurjs('reset');
      return $(".modal").hide();
    });
  });

  $(function() {
    $.fn.extend({
      blurjs: function(options) {
        var css, removeBlurs, settings, singleSetting, svg;
        removeBlurs = function(_obj) {
          var i, _results;
          _results = [];
          for (i in window.blurJSClasses) {
            if (_obj.hasClass(window.blurJSClasses[i])) {
              _results.push(_obj.removeClass(window.blurJSClasses[i]));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
        singleSetting = function(obj, target) {
          switch (target) {
            case "remove":
              return removeBlurs(obj);
          }
        };
        svg = function(amt) {
          if ($("#blurjs-" + amt).length !== 0) {
            $("#blurjs-" + amt).remove();
          }
          return $("body").append("<svg id=\"blurjs-" + amt + "\"><filter id=\"blur" + amt + "px\"><feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"" + amt + "\"></feGaussianBlur></filter></svg>");
        };
        css = function(cssClass, amt) {
          svg(amt);
          return "<style type=\"text/css\">." + cssClass + "{-ms-filter:blur(" + amt + "px);-webkit-filter:blur(" + amt + "px);-moz-filter:blur(" + amt + "px);-o-filter:blur(" + amt + "px);filter: url(\"#blur" + amt + "px\");filter:progid:DXImageTransform.Microsoft.Blur(pixelradius=" + amt + ");}</style>";
        };
        this.defaultOptions = {
          customClass: "blurjs",
          radius: 5,
          persist: false
        };
        if (typeof options === "string") {
          singleSetting($(this), options);
          return;
        }
        settings = $.extend({}, this.defaultOptions, options);
        if (typeof window.blurJSClasses === "undefined") {
          window.blurJSClasses = [];
        }
        return this.each(function() {
          var $this, blurredClass, cssData;
          $this = $(this);
          blurredClass = settings.customClass + "-" + settings.radius + "-radius";
          window.blurJSClasses.push(blurredClass);
          if (!settings.persist && $("head style:contains(" + settings.customClass + ")").length !== 0) {
            $("head style:contains(" + settings.customClass + ")").remove();
          }
          if ($("head style:contains(" + blurredClass + ")").length === 0) {
            cssData = css(blurredClass, settings.radius);
            console.log(cssData);
            $(cssData).appendTo("head");
          }
          return $this.addClass(blurredClass);
        });
      }
    });
    return $.extend({
      blurjs: function(action) {
        var i, _results;
        if (action === "reset") {
          _results = [];
          for (i in window.blurJSClasses) {
            _results.push($("." + window.blurJSClasses[i]).removeClass(window.blurJSClasses[i]));
          }
          return _results;
        }
      }
    });
  });

}).call(this);
:@created_atf1362748371.6273191 %ÿ:@expires_in0